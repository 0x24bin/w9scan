#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: w8ay
# @Date:   2017年12月19日 12:04:55
import os
from lib.core.data import paths
import imp
from lib.core.log import *
from lib.core.common import Get_lineNumber_fileName
from thirdparty import miniCurl
from lib.utils import until

class Exploit_run(object):

    def __init__(self,url):
        self.hash_pycode_Lists = {}
        self.url = url
        filter_func = lambda file: (True, False)['__init__' in file or 'pyc' in file]
        dir_exploit = filter(filter_func, os.listdir(paths.w9scan_Plugin_Path))
        try:
            for exp in dir_exploit:
                with open(os.path.join(paths.w9scan_Plugin_Path,exp), 'rb') as f:
                    reads = str(f.read())
                    f.close()
                    self.hash_pycode_Lists.setdefault(exp, reads)
        except Exception as error_info:
            print error_info

        print '[***] Fetch %d new plugins' % len(self.hash_pycode_Lists)

    def _load_module(self,chunk,name='<w9scan>'):
        pluginObj = imp.new_module(str(name))
        exec chunk in pluginObj.__dict__
        return pluginObj
    
    def load_modules(self,service,url):
        # 内部载入所有模块，并且判断服务名是否正确
        for k, v in self.hash_pycode_Lists.iteritems():
            pluginObj = self._load_module(v)
            pluginObj.task_push = self.task_push
            pluginObj.curl = miniCurl.Curl()
            pluginObj.security_note = self._security_note
            pluginObj.security_info = self._security_info
            pluginObj.security_warning = self._security_warning
            pluginObj.security_hole = self._security_hole
            pluginObj.util = until

            try:

                pluginObj_tuple = pluginObj.assign(service, url)

                if not isinstance(pluginObj_tuple, tuple):  # 判断是否是元组
                    continue
                bool_value, agrs = pluginObj_tuple[0],pluginObj_tuple[1]

                #print k,bool_value,agrs
                if (bool_value):
                    #print service,k,agrs
                    print "[***] Load Plugins %s for service '%s'" %(k,service)
                    pluginObj.audit(agrs)
            except Exception as error_info:

                print service,k,error_info

    def _work(self):
        # 程序内部工作线程
        pass

    def _security_note(self, body, uuid=None):
        logger.security_note(body)

    def _security_info(self, body, uuid=None):
        logger.security_info(body)

    def _security_warning(self, body, uuid=None):
        logger.security_warning(body)

    def _security_hole(self, body, uuid=None):
        logger.security_hole(body)

    def task_push(self, serviceType, target_info, uuid=None, target=None, pr=-1):
        self.load_modules(serviceType,target_info)
        pass